const path = require('path')
const { promisify } = require('util')
const frontMatter = require('front-matter')
const fs = require('fs')
const globby = require('globby');
const { render } = require('./md-render');

const { docsMenu } = require('../constants/docsMenu');

const readFile = promisify(fs.readFile)
const baseLoc = path.normalize(`${__dirname}/..`)
const docsLoc = 'content/docs'

const deserialize = (parsed, ...extra) => {
  Object.assign(parsed.attributes, ...extra, { body: parsed.body });
}

async function fetch() {
  const docsDir = path.join(baseLoc, docsLoc)
  const filenames = await globby(docsDir + '/**/*.md');

  console.log('files', filenames)

  return Promise.resolve(filenames.map(async filename => {
    const fn = path.basename(filename, path.extname(filename))
    const raw = await readFile(filename, 'utf-8')
    const parsed = frontMatter(raw)
    return deserialize(parsed, { fn, filename })
  }))
}

async function handle() {
  docsItems = {}
  for (const menuItem of docsMenu) {
    docsItems[menuItem.slug] = menuItem;
    for (const menuItem2nd of (menuItem.items || [])) {
      docsItems[menuItem2nd.slug] = menuItem2nd
    }
  }

  for (const docItem of await fetch()) {
    const { title, body, parent, slug } = docItem;
    if (slug && parent) {
      const bodyHtml = render(body);
      const item = { slug, title: title || slug, bodyHtml, parent }
      docsItems[slug] = item;
      docsItems[parent].items = docsItems[parent].items || []
      docsItems[parent].items.push(item)
    }
  }
}

exports.handle = handle
exports.fetch = fetch
